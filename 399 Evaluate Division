class Solution {
public:
    
    void dfs(unordered_map<string,int> um,vector<vector<double>>  grid,int i,string s,double val,vector<double> &v,int &flag)
    {
        
        if(flag==1)
            return;
        
        if(um[s]== i)
        {
            v.push_back(val);
            flag=1;
            return;
        }
        
        for(int k=1;k<23 ; ++k)
        {
            if(grid[i][k]!= -1)
            {
                double t =grid[i][k];
                grid[i][k]=-1;
                dfs(um,grid,k,s,val*t,v,flag);
                grid[i][k]=t;
            }
        }
    }
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        
        int e = equations.size();
        int q = queries.size();
        int cnt = 0;
        
        vector<double> ans;
        
        unordered_map<string,int> um;
        
        vector<vector<double>> grid(55,vector<double> (55,-1));
     
        
        for(int i=0;i<e ; i++)
        {
            string st = equations[i][0];
            string ed = equations[i][1];
            int cnt1,cnt2;
            
            if(um.find(st)==um.end())
            {
                ++cnt;
                um[st]=cnt;
                cnt1=cnt;
            }
            else
                cnt1= um[st];
            
            if(um.find(ed)==um.end())
            {
                ++cnt;
                um[ed]=cnt;
                cnt2=cnt;
            }
            else
                cnt2= um[ed];
            
            grid[cnt1][cnt2]= values[i];
            grid[cnt2][cnt1] = 1.0/(values[i]);
        }
       
        for(int i=0;i<q ; i++)
        {
            string st = queries[i][0];
            string ed = queries[i][1];
            
            if(um.find(st)==um.end() || um.find(ed)==um.end())
            {
                ans.push_back(-1);
                continue;
            }
            else
            {
                int k = um[st];
                int flag=0;
                dfs(um,grid,k,ed,1,ans,flag);
                if(flag==0)
                    ans.push_back(-1);
                    
            }
        }
        return ans;
    }
};
