/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long int fn(string s)
    {
        long long int t=1;
        long long int sm=0;
        
        for(int i=s.size()-1;i>-1;i--)
        {
            if(s[i]=='1')
                sm+= t;
            t=t*2;
        }
        return sm;
    }
    void inorder(struct TreeNode* root,vector<string> &v, string s)
    {
        if(root->left==NULL && root->right==NULL)
        {
                v.push_back(s+to_string(root->val));
        return;
        }
        int x= root->val;
        if(root->left!=NULL)
        inorder(root->left,v,s+to_string(x));
        if(root->right!=NULL)
        inorder(root->right,v,s+to_string(x));
        
    }
    int sumRootToLeaf(TreeNode* root) {
        
        if(root==NULL)
            return 0;
        
        vector<string> s;
        
        inorder(root,s,"");
        
        long long sm=0;
        
        for(int i=0;i<s.size();i++)
        {
            cout<<s[i]<<endl;
            sm+= fn(s[i]);
        }
        return sm;
    }
};
