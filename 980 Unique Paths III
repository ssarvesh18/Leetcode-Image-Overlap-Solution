class Solution {
public:
    
   
    void DFS(vector<vector<int>>& grid,int m,int n,int i,int j,int cnt,int zeros,pair<int,int>& dest,int &ans)
    {
        if(i > m-1 || j >n-1 || i<0 || j<0 || grid[i][j]== -1 ||grid[i][j]==3)
            return;
        
        if(i==dest.first && j==dest.second && zeros == cnt-1 )
        {
            ans++;
            return;
        }
        
        if(i==dest.first && j==dest.second)
            return;
        
        int temp = grid[i][j];
        
        grid[i][j] = 3;
        
        DFS(grid,m,n,i+1,j,cnt+1,zeros,dest,ans);
        DFS(grid,m,n,i,j-1,cnt+1,zeros,dest,ans);
        DFS(grid,m,n,i-1,j,cnt+1,zeros,dest,ans);
        DFS(grid,m,n,i,j+1,cnt+1,zeros,dest,ans);
        
        grid[i][j] = temp;
        
        return;
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        int zeros=0;
        int m= grid.size();
        int n= grid[0].size();
        pair<int,int> start;
        pair<int,int> dest;
        
        start.first=-1;
        start.second = -1;
        dest.first=-1;
        dest.second = -1;
        
        if(m<=1 && n<=1)
            return 0;
        
        for(int i=0;i<m;++i)
        {
            for(int j=0;j<n; ++j)
            {
                if(grid[i][j]==0)
                    zeros++;
                else if(grid[i][j]==1)
                {
                    start.first=i;
                    start.second =j;
                }
                else if(grid[i][j]==2)
                {
                    dest.first=i;
                    dest.second =j;
                    
                }
                
            }
        }
        
        if(dest.first==-1 || start.first==-1)
                return 0;
        
        int ans=0;
        DFS(grid,m,n,start.first,start.second,0,zeros,dest,ans);
        return ans;
    }
};
